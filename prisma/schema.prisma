datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(VIEWER)
    movies        Movies[]
}

model Settings {
    id                String  @id @default(cuid())
    allowRegistration Boolean @default(false)
}

enum Role {
    ADMIN
    VIEWER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Movies {
    id               String      @id @default(cuid())
    tmdbId           String
    seen             Boolean?
    liked            Boolean?
    disliked         Boolean?
    watchlist        Boolean?
    comments         String?
    adult            Boolean
    originalLanguage String
    originalTitle    String
    overview         String
    popularity       Float
    releaseDate      String
    title            String
    video            Boolean
    voteAverage      Float
    voteCount        Int
    posters          Posters[]
    backdrops        Backdrops[]
    User             User?       @relation(fields: [userId], references: [id])
    userId           String?
    genres           Int[]
    insertedAt       DateTime    @default(now())
}

model Backdrops {
    id       Int     @id @default(autoincrement())
    w300     String?
    w780     String?
    w1280    String?
    original String?
    Movies   Movies? @relation(fields: [moviesId], references: [id])
    moviesId String?
}

model Posters {
    id       Int     @id @default(autoincrement())
    w92      String?
    w154     String?
    w185     String?
    w342     String?
    w500     String?
    w780     String?
    original String?
    Movies   Movies? @relation(fields: [moviesId], references: [id])
    moviesId String?
}
